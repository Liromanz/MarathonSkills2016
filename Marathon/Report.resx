<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="crossPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B0qzTQvpm+reAAAAAElFTkSuQmCC
</value>
  </data>
</root>